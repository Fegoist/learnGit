HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

git checkout -- readme.txt
该命令让这个文件回到最近一次git commit或git add时的状态。

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改

创建+切换分支：git checkout -b <name>
git branch -d <name>
git merge命令用于合并指定分支到当前分支。

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
我个人觉得场景是这样的。设A为游戏软件
1、master 上面发布的是A的1.0版本
2、dev 上开发的是A的2.0版本
3、这时，用户反映 1.0版本存在漏洞，有人利用这个漏洞开外挂
4、需要从dev切换到master去填这个漏洞，正常必须先提交dev目前的工作，才能切换。
5、而dev的工作还未完成，不想提交，所以先把dev的工作stash一下。然后切换到master
6、在master建立分支issue101并切换.
7、在issue101上修复漏洞。
8、修复后，在master上合并issue101
9、切回dev，恢复原本工作，继续工作。

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

